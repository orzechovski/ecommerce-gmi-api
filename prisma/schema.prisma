generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id             String      @id @default(cuid())
  title          String
  subtitle       String?
  description    String
  is_giftcard    Boolean     @default(false)
  status         String      @default("draft")
  thumbnail      String?
  profile_id     String?
  weight         Float?
  price          Float
  length         Float?
  height         Float?
  width          Float?
  hs_code        String?
  origin_country String?
  mid_code       String?
  material       String?
  collection_id  String?
  type_id        String?
  discountable   Boolean     @default(true)
  external_id    String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  deletedAt      DateTime?
  metadata       Json?
  OrderItems     OrderItem[]
  CartItem       CartItem[]
  stock          Int         @default(0)
}

model Order {
  id               String      @id @default(cuid())
  status           String      @default("pending")
  customer_id      String
  payment_status   String      @default("not_paid")
  shipping_address String
  total_price      Float
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  items            OrderItem[]
  customer         Customer    @relation(fields: [customer_id], references: [id])
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   String
  productId String
  quantity  Int
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id                    String    @id @default(cuid())
  email                 String
  customer_id           String
  payment_session       Json?
  payment_id            String?
  type                  String    @default("default")
  completed_at          DateTime?
  payment_authorized_at DateTime?
  idempotency_key       String?
  context               Json?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  deletedAt             DateTime?
  metadata              Json?

  customer Customer @relation(fields: [customer_id], references: [id])

  items CartItem[] @relation("CartToCartItems")
}

model CartItem {
  id        Int    @id @default(autoincrement())
  cartId    String
  productId String

  cart Cart @relation(name: "CartToCartItems", fields: [cartId], references: [id])

  product Product @relation(fields: [productId], references: [id])

  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id                 String    @id @default(cuid())
  email              String    @unique
  first_name         String
  last_name          String
  password           String
  role               Role      @default(USER)
  billing_address_id String
  phone              String?
  has_account        Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?
  metadata           Json?
  carts              Cart[]
  orders             Order[]
}

enum Role {
  USER
  ADMIN
}
